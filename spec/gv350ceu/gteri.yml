name: "+RESP/+BUFF:GTERI"
device: "GV350CEU"
message_family: "ERI"
encoding: "ASCII"
delimiter: ","
terminator: "$"
version_field: { name: full_protocol_version, length_variant: [6,7], format: hex }

schema:
  sections:
    - name: head
      fields:
        - { name: header, const_any: ["+RESP:GT", "+BUFF:GT"], type: string }
        - { name: message, const: "ERI", type: string }
        - { name: full_protocol_version, type: hex, length_variant: [6,7] }
        - { name: imei, type: string, length: 15, pattern: "^[0-9]{15}$" }
        - { name: device_name, type: string, max_length: 20 }

    - name: body
      fields:
        - { name: eri_mask, type: hex, length: 8, desc: "Bitmask que habilita bloques de datos opcionales del ERI." }

        # Alimentación / tipo de reporte / contador
        - { name: external_power_mv, type: int, min: 0, max: 32000, nullable: true, desc: "Voltaje de alimentación externa en mV." }
        - { name: report_type, type: string, length: 2, pattern: "^[0-9A-Fa-f]{2}$", desc: "X(1-5)Y(0-6)." }
        - { name: number, type: int, min: 1, max: 15 }

        # GNSS básicos
        - { name: gnss_accuracy, type: int, min: 0, max: 50 }
        - { name: speed_kmh, type: float, min: 0.0, max: 999.9 }
        - { name: azimuth, type: int, min: 0, max: 359 }
        - { name: altitude_m, type: float, nullable: true }
        - { name: lon, type: float }
        - { name: lat, type: float }
        - { name: gnss_utc_time, type: datetime, format: "YYYYMMDDHHMMSS" }

        # Celda servidora
        - { name: mcc, type: string, length: 4, pattern: "^0[0-9]{3}$" }
        - { name: mnc, type: string, length: 4, pattern: "^0[0-9]{3}$" }
        - { name: lac_hex, type: hex, length: 4 }
        - { name: cell_id_hex, type: hex, length_variant: [4,8] }

        # Append mask y anexos (opcionales controlados por máscara de posición)
        - { name: position_append_mask, type: hex, length: 2, desc: "Bitmask que controla anexos después de Cell ID." }
        - { name: satellites_in_use, type: int, min: 0, max: 72, optional_by: "position_append_mask.bit0" }
        - { name: gnss_trigger_type, type: int, min: 0, max: 4, optional_by: "position_append_mask.bit?" }
        - { name: gnss_jamming_state, type: int, enum: [0,1,2,3], optional_by: "position_append_mask.bit4", desc: "0=Unknown,1=OK,2=Warning,3=Critical(no fix)" }

        # Odómetro / horas motor
        - { name: mileage_km, type: float, min: 0.0, max: 4294967.0 }
        - { name: hour_meter, type: string, length: 13, pattern: "^[0-9]{7}:[0-9]{2}:[0-9]{2}$" }

        # Entradas analógicas (formato mV o F(0-100))
        - { name: analog_in_1, type: string, desc: "mV o F(0-100)" }
        - { name: analog_in_2, type: string, desc: "mV o F(0-100)" }
        - { name: analog_in_3, type: string, desc: "mV o F(0-30000) o F(0-100)" }

        # Estado del equipo
        - { name: backup_batt_percent, type: int, min: 0, max: 100 }
        - { name: device_status, type: hex, length_variant: [6,10] }

        # UART / sensores acoplados (opcionales controlados por ERI Mask)
        - { name: uart_device_type, type: int, enum: [0,1,7] }

        # Digital Fuel Sensor (opcional por ERI Mask bit0)
        - { name: digital_fuel_sensor_raw, type: string, max_length: 20, optional_by: "eri_mask.bit0" }

        # 1-Wire (opcional por ERI Mask bit1)
        - name: onewire
          repeated: true
          optional_by: "eri_mask.bit1"
          group:
            - { name: onewire_device_count, type: int, min: 0, max: 19 }
            - { name: onewire_device_id, type: hex, length: 16, repeats_with: "onewire_device_count" }
            - { name: onewire_device_type, type: int, enum: [1], repeats_with: "onewire_device_count" }
            - { name: onewire_device_data, type: hex, max_length: 40, repeats_with: "onewire_device_count", desc: "Temp en complemento a dos; luego x0.0625°C." }

        # CAN (opcional por ERI Mask bit2)
        - { name: can_data, type: string, max_length: 1000, optional_by: "eri_mask.bit2" }

        # Fuel Sensor generic (opcional por ERI Mask bit10)
        - name: fuel_sensors
          repeated: true
          optional_by: "eri_mask.bit10"
          group:
            - { name: fuel_sensor_count, type: int, min: 0, max: 100 }
            - { name: fuel_sensor_type, type: int, enum: [0,1,2,3,4,6,20,21,22] }
            - { name: fuel_percentage, type: float, min: 0.0, max: 100.0, nullable: true }
            - { name: fuel_volume_l, type: float, min: 0.0, max: 6000.0, nullable: true }
            - { name: fuel_temperature_c, type: int, min: -40, max: 85, nullable: true }

        # RF433 (WTS100/WTH100) (opcional por ERI Mask bit?)
        - name: rf433
          repeated: true
          optional_by: "eri_mask.bit?"   # según configuración
          group:
            - { name: rf433_count, type: int, min: 0, max: 10 }
            - { name: rf433_serial, type: hex, length: 5, repeats_with: "rf433_count" }
            - { name: rf433_type, type: int, enum: [1,2], repeats_with: "rf433_count" }
            - { name: rf433_temperature_c, type: int, min: -20, max: 60, repeats_with: "rf433_count" }
            - { name: rf433_humidity_pct, type: int, min: 0, max: 100, nullable: true, repeats_with: "rf433_count" }

        # Bluetooth accessories (opcional por ERI Mask; con Append Mask expansible)
        - name: ble_accessories
          repeated: true
          optional_by: "eri_mask.bit?"   # según configuración
          group:
            - { name: ble_count, type: int, min: 0, max: 10 }
            - { name: ble_index, type: int, min: 0, max: 9, repeats_with: "ble_count" }
            - { name: ble_type, type: int, repeats_with: "ble_count" }
            - { name: ble_model, type: int, min: 0, max: 5, repeats_with: "ble_count" }
            - { name: ble_raw, type: hex, max_length: 18, nullable: true, repeats_with: "ble_count" }
            - { name: ble_append_mask, type: hex, length_variant: [4,8], repeats_with: "ble_count",
                desc: "Bit0..15 base; Bit15=expansión activa -> habilita Bit16..31." }
            - { name: ble_name, type: string, max_length: 20, optional_by: "ble_append_mask.bit0" }
            - { name: ble_mac, type: hex, length: 12, optional_by: "ble_append_mask.bit1" }
            - { name: ble_status, type: int, enum: [0,1], optional_by: "ble_append_mask.bit2" }
            - { name: ble_batt_mv, type: int, min: 0, max: 5000, optional_by: "ble_append_mask.bit3" }
            - { name: ble_temp_c, type: int, min: -40, max: 80, optional_by: "ble_append_mask.bit4" }
            - { name: ble_humidity_pct, type: int, min: 0, max: 100, optional_by: "ble_append_mask.bit5" }
            - { name: ble_io_output, type: hex, length: 2, optional_by: "ble_append_mask.bit7" }
            - { name: ble_io_input, type: hex, length: 2, optional_by: "ble_append_mask.bit7" }
            - { name: ble_io_analog_mv, type: int, min: 0, max: 32000, optional_by: "ble_append_mask.bit7" }
            - { name: ble_mode, type: int, min: 0, max: 12, optional_by: "ble_append_mask.bit8" }
            - { name: ble_event, type: int, min: 0, max: 255, optional_by: "ble_append_mask.bit8" }
            - { name: ble_tire_pressure_kpa, type: int, min: 0, max: 500, optional_by: "ble_append_mask.bit9" }
            - { name: ble_timestamp, type: datetime, format: "YYYYMMDDHHMMSS", optional_by: "ble_append_mask.bit10" }
            - { name: ble_temp_enh_c, type: float, optional_by: "ble_append_mask.bit11" }
            - { name: ble_magnet_id, type: hex, length: 2, optional_by: "ble_append_mask.bit12" }
            - { name: ble_mag_event_counter, type: int, min: 0, max: 32767, optional_by: "ble_append_mask.bit12" }
            - { name: ble_magnet_state, type: int, enum: [0,1], optional_by: "ble_append_mask.bit12" }
            - { name: ble_batt_pct, type: int, min: 0, max: 100, optional_by: "ble_append_mask.bit13" }
            - { name: ble_relay_state, type: int, enum: [0,1], optional_by: "ble_append_mask.bit14" }
            # Expansión (Bit15=1) habilita 16..31
            - { name: ble_triax_accel_hex, type: hex, length: 12, optional_by: "ble_append_mask.bit16" }
            - { name: ble_angles_hex, type: hex, length: 6, optional_by: "ble_append_mask.bit17" }
            - { name: ble_sensor_event_mask, type: hex, length: 2, optional_by: "ble_append_mask.bit18" }
            - { name: ble_tilt_event_hex, type: hex, length: 4, optional_by: "ble_append_mask.bit18" }
            - { name: ble_motion_event_hex, type: hex, length: 4, optional_by: "ble_append_mask.bit18" }
            - { name: ble_crash_event_hex, type: hex, length: 4, optional_by: "ble_append_mask.bit18" }
            - { name: ble_falling_event_hex, type: hex, length: 4, optional_by: "ble_append_mask.bit18" }
            - { name: ble_move_event_hex, type: hex, length: 4, optional_by: "ble_append_mask.bit19" }

        # RAT/Band (opcional por ERI Mask bit?)
        - name: rat_band
          optional_by: "eri_mask.bit?"
          group:
            - { name: rat, type: int, enum: [0,1,2,3,4], desc: "0=No service,1=EGPRS,4=LTE Cat1" }
            - { name: band, type: string, max_length: 4, desc: "0 inválido; 1-5/7-8/20/28 banda; otros valores GSM (850/900/1800/1900)." }

    - name: tail
      fields:
        - { name: send_time, type: datetime, format: "YYYYMMDDHHMMSS" }
        - { name: count_hex, type: hex, length: 4 }

validation:
  rules:
    - { name: header_and_message, assert: "(header in ['+RESP:GT', '+BUFF:GT']) and message == 'ERI'" }
    - { name: terminator,        assert: "line.endswith('$')" }
    - { name: lat_lon_range,     assert: "(-90.0 <= lat <= 90.0) and (-180.0 <= lon <= 180.0)" }

examples:
  - raw: "+RESP:GTERI,740904,862524060204589,GV350CEU,00000100,,10,1,1,0.0,355,97.7,117.129252,31.839388,20240415054037,0460,0000,550B,085BE2AA,01,11,3.6,,,,,0,210100,0,1,00,11,0,0000001E,100F,,D325C2B2A2F8,1,2967,0,15,0,20240415154438,405C$"
    parsed_keys_must_include: [imei, device_name, eri_mask, lon, lat, position_append_mask, send_time, count_hex]
